
'''Задание на л.р. №6
Задание состоит из двух частей. 
1 часть – написать программу в соответствии со своим вариантом задания.
Написать 2 варианта формирования (алгоритмический и с помощью функций Питона),
сравнив по времени их выполнение.
2 часть – усложнить написанную программу,
введя по своему усмотрению в условие минимум одно ограничение
на характеристики объектов (которое будет сокращать количество переборов)
и целевую функцию для нахождения оптимального  решения.

Вариант 19. Дан список достопримечательностей.
Сформировать все возможные варианты туристических маршрутов.

Усложнение: В туристическом маршруте могут быть только музеи
'''
import itertools
import timeit
import tabulate
from itertools import combinations
#часть 1
'''
d = ['Эрмитаж','Исаакиевский собор','Спас на крови',
     'Дворцовая площадь',
     'Петергоф','Русский музей']

def Mf(lst):
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in itertools.permutations(lst, i)]
        combs.append(y)
        for j in combs:
            if combs.count(j)!=1:
                combs.remove(j)
    return combs

def Ma(lst):
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in R(lst, i)]
        combs.append(y)
    for j in combs:
        if combs.count(j)!=1:
            combs.remove(j)
    return combs

def R(array, num):  
    if num == 0:  
        return [[]] 
    l =[] 
    for j in range(0, len(array)):  
        emptyArray = array[j] 
        recurList = array[j + 1:] 
        for x in R(recurList, num-1):  
            l.append([emptyArray]+x)
    return l


print('Всевозможные маршруты:',Ma(d))

time_F = timeit.timeit(lambda: Mf(d), number=1)
time_A = timeit.timeit(lambda: Ma(d), number=1)

print('Время вычисления с помощью функций питона:', time_F, \n, 'Время вычисления алгебраически:', time_A)

'''
#часть 2
d = ['Эрмитаж','Исаакиевский собор','Спас на крови',
     'Дворцовая площадь',
     'Петергоф','Русский музей']
c = ['Музей','Музей','Храм','Площадь','Заповедник','Музей']

def F(lst,tipe,s):
    D=[]
    for i in range(len(lst)):
        if tipe[i]==s:
            D.append(lst[i])
    return D
F=F(d,c,'Музей')        

def Mf(lst):
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in itertools.permutations(lst, i)]
        combs.append(y)
        for j in combs:
            if combs.count(j)!=1:
                combs.remove(j)
    return combs

def Ma(lst):
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in R(lst, i)]
        combs.append(y)
    for j in combs:
        if combs.count(j)!=1:
            combs.remove(j)
    return combs
def R(array, num):  
    if num == 0:  
        return [[]] 
    l =[] 
    for j in range(0, len(array)):  
        emptyArray = array[j] 
        recurList = array[j + 1:] 
        for x in R(recurList, num-1):  
            l.append([emptyArray]+x)
    return l

def MF(lst):
    y = [list(x) for x in itertools.permutations(lst, len(lst))]
    for j in y:
        if y.count(j)!=1:
            y.remove(j)    
    return y

print('Всевозможные маршруты, учитывая ограничение:',Mf(F))
print('\n Целевая функция:', MF(F))

time_F = timeit.timeit(lambda: (Mf(F)), number=1)
time_A = timeit.timeit(lambda: (Ma(F)), number=1)

