'''Задание на л.р. №6
Задание состоит из двух частей. 
1 часть – написать программу в соответствии со своим вариантом задания.
Написать 2 варианта формирования (алгоритмический и с помощью функций Питона),
сравнив по времени их выполнение.
2 часть – усложнить написанную программу,
введя по своему усмотрению в условие минимум одно ограничение
на характеристики объектов (которое будет сокращать количество переборов)
и целевую функцию для нахождения оптимального  решения.

Вариант 19. Дан список достопримечательностей.
Сформировать все возможные варианты туристических маршрутов.

Усложнение: В туристическом маршруте могут быть только музеи
'''
import itertools
import timeit
import tabulate

#часть 1
'''
d = ['Эрмитаж','Исаакиевский собор','Спас на крови',
     'Дворцовая площадь',
     'Петергоф','Русский музей']

def Mf(lst):
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in itertools.combinations(lst, i)]
        combs.append(y)
    return combs
print(Mf(d))

def Ma(lst):
    combs = []
    n = len(lst)
    for i in range(1, 2**n):
        x = [lst[j] for j in range(n) if (i >> j) % 2 == 1]
        combs.append(x)
    return combs

print(Ma(d))

time_F = timeit.timeit(lambda: Mf(d), number=1)
time_A = timeit.timeit(lambda: Ma(d), number=1)

print(time_F,time_A)
'''
#часть 2
d = ['Эрмитаж','Исаакиевский собор','Спас на крови',
     'Дворцовая площадь',
     'Петергоф','Русский музей']
c = ['Музей','Музей','Храм','Площадь','Заповедник','Музей']

def F(lst,tipe,s):
    D=[]
    for i in range(len(lst)):
        if tipe[i]==s:
            D.append(lst[i])
    return D
        
def Mf(lst):
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in itertools.combinations(lst, i)]
        combs.append(y)
    return combs

def Ma(lst):
    combs = []
    n = len(lst)
    for i in range(1, 2**n):
        x = [lst[j] for j in range(n) if (i >> j) % 2 == 1]
        combs.append(x)
    return combs

print(Ma(F(d,c,'Музей')))

time_F = timeit.timeit(lambda: (Mf(F(d,c,'Музей'))), number=1)
time_A = timeit.timeit(lambda: (Ma(F(d,c,'Музей'))), number=1)

print(time_F,time_A)

