'''Лабораторная работа №5
Задана рекуррентная функция.
Область определения функции – натуральные числа.
Написать программу сравнительного вычисления данной функции рекурсивно
и итерационно(значение, время).
Определить (смоделировать) границы применимости рекурсивного
и итерационного подхода.
Результаты сравнительного исследования времени вычисления
представить в табличной и графической форме в виде отчета по лабораторной работе.
Вариант 19
F(1) = 1, F(n) = (-1)^n*(F(n–1) /(2n)! - (n + sin(n))),
при четных n > 1 F(n)=n! при нечетных n > 1
'''
import timeit
import matplotlib.pyplot as plt
import math
import tabulate

def rec_F(n):
    if n==1:
        return 1
    elif n>1 and n%2==0:
        return (rec_F(n-1) / math.factorial(2*n))- (n + math.sin(n))
    elif n>1 and n%2!=0:
        return math.factorial(n)

def iter_F(n):
    F = [0]*(n+1)
    F[1]=1
    for i in range(2,n+1,2):
        F[i] = (F[n-1] / math.factorial(2*n)) - (n + math.sin(n))
    for i in range(3,n+1,2):
        F[i] = math.factorial(n)
    return F[n]

q = list(range(1,51))

rec_time=[]
iter_time=[]
for n in q:
    time_rec = timeit.timeit(lambda: rec_F(n), number=1)
    rec_time.append(time_rec)
    time_iter = timeit.timeit(lambda: iter_F(n), number=1)
    iter_time.append(time_iter)

rec_F=[rec_F(n) for n in q]
print('Таблица:')
print(tabulate.tabulate({"Значение":rec_F,"Время рекурсиии": rec_time,"Время итерации": iter_time}, headers= 'keys',tablefmt="fancy_grid",showindex = q))
    
plt.bar(q, rec_time, label='Рекурсия', color='green',alpha=0.9)
plt.bar(q, iter_time, label='Итерация', color='blue',alpha=0.5)
plt.plot(q, rec_time, color='green', marker='o', markersize=7)
plt.plot(q, iter_time, color='blue', marker='o', markersize=7)
plt.xlabel('n') 
plt.ylabel('Время') 
plt.title('График') 
plt.show()

