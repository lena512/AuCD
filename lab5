'''Лабораторная работа №5
Задана рекуррентная функция.
Область определения функции – натуральные числа.
Написать программу сравнительного вычисления данной функции рекурсивно
и итерационно(значение, время).
Определить (смоделировать) границы применимости рекурсивного
и итерационного подхода.
Результаты сравнительного исследования времени вычисления
представить в табличной и графической форме в виде отчета по лабораторной работе.
Вариант 19
F(1) = 1, F(n) = (-1)^n*(F(n–1) /(2n)! - (n + sin(n))),
при четных n > 1 F(n)=n! при нечетных n > 1
'''
import timeit
import matplotlib.pyplot as plt
import tabulate
import math

Q=2
q=2
def r_fl(n):
    global q,Q
    if q==n:
        return Q
        q+=1
    if n==1 or n==0:
        return 1
    elif n>=2:
        x=n*r_fl(n-1)
        return x
        q+=1
        Q=x


W=2
w=2
def i_fl(n):
    global w,W
    f=[0]*(n+1)
    f[1]=1
    if w==n:
        f[n]=W
        w+=1
    for i in range(2,n+1):
        f[i]=f[i-1]*i
        W=f[i]
        w+=1
    return f[n]


k=-1
e=1
E=1
def rec_F(n):
    global E,e,k
    if n==e:
        return E
        e+=1
    elif n>1 and n%2==0:
        k *= -1
        x=k*((rec_F(n-1) / r_fl(2*n))- (n + math.sin(n)))
        E=x
        return x
    elif n>1 and n%2!=0:
        x=r_fl(n)
        E=x
        return x
c=-1
r=1
R=1
def iter_F(n):
    global c,r,R
    F = [0]*(n+1)
    if r==n:
        F[n]=R
        r+=1
    for i in range(2,n+1,2):
        c*=-1
        F[i] = c*((F[n-1] / i_fl(2*n)) - (n + math.sin(n)))
        R=F[i]
        r+=1
    for i in range(3,n+1,2):
        F[i] = i_fl(n)
        R=F[i]
        r+=1
    return F[n]

q = list(range(1,51))

rec_time=[]
iter_time=[]
for n in q:
    time_rec = timeit.timeit(lambda: rec_F(n), number=1)
    rec_time.append(time_rec)
    time_iter = timeit.timeit(lambda: iter_F(n), number=1)
    iter_time.append(time_iter)

rec_F=[rec_F(n) for n in q]
print('Таблица:')
print(tabulate.tabulate({"Значение":rec_F,"Время рекурсиии": rec_time,"Время итерации": iter_time}, headers= 'keys',tablefmt="fancy_grid",showindex = q))
    

plt.plot(q, rec_time, color='green', marker='o', markersize=7)
plt.plot(q, iter_time, color='blue', marker='o', markersize=7)
plt.bar(q, rec_time, label = 'Рекурсия', color='green')
plt.bar(q, iter_time, label = 'Итерация', color='blue',alpha=0.5)
plt.xlabel('n') 
plt.ylabel('Время') 
plt.title('График') 
plt.show()
