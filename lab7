'''
Задание на л.р. №7
Требуется для своего варианта второй части л.р. №6 (усложненной программы)
разработать реализацию с использованием графического интерфейса.
Допускается использовать любую графическую библиотеку питона.  
Рекомендуется использовать внутреннюю библиотеку питона tkinter.

Вариант 19. Дан список достопримечательностей.
Сформировать все возможные варианты туристических маршрутов.
Усложнение: В туристическом маршруте могут быть достопримечательности только указанного типа
'''
import itertools
import timeit
import tabulate
from tkinter import *
from tkinter import ttk
#часть 2
d = ['Эрмитаж','Исаакиевский_собор','Спас_на_крови',
     'Дворцовая_площадь',
     'Петергоф','Русский_музей']
c = [500,250,450,0,600,550]

def F(lst,p,s):
    D=[]
    for i in range(len(lst)):
        if p[i]<=s:
            D.append(lst[i])
    return D
F500=F(d,c,500)        

def Mf(lst):
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in itertools.permutations(lst, i)]
        combs.append(y)
        for j in combs:
            if combs.count(j)!=1:
                combs.remove(j)
    return combs

def Ma(lst):
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in R(lst, i)]
        combs.append(y)
    for j in combs:
        if combs.count(j)!=1:
            combs.remove(j)
    return combs
def R(array, num):  
    if num == 0:  
        return [[]] 
    l =[] 
    for j in range(0, len(array)):  
        emptyArray = array[j] 
        recurList = array[j + 1:] 
        for x in R(recurList, num-1):  
            l.append([emptyArray]+x)
    return l

time_F = timeit.timeit(lambda: (Mf(F500)), number=1)
time_A = timeit.timeit(lambda: (Ma(F500)), number=1)

def Mm(lst):
    global c, d
    combs = []
    for i in range(1, len(lst)+1):
        y = [list(x) for x in itertools.permutations(lst, i)]
        combs.append(y)
        for j in combs:
            if combs.count(j)!=1:
                combs.remove(j)
            k1=sum(c)
            k=0
            u=[]
            for t in combs:
                for w in t:
                    for q in range(len(d)):
                        if w==d[q]:
                            k=k+c[q]
                if k<k1:
                    k1=k
                    k=0
                    u=[]
                    u.append(w)
    return u,k1


root = Tk()     
root.title("Программа 'Составитель маршрутов'")     
root.geometry("1150x500")   
root.grid_columnconfigure(0, weight = 1)
root.grid_rowconfigure(0, weight = 1)

label = Label(text="Составление маршрутов по достопримечательностям") 
label.pack()   


def begin():
    btn["state"] = ["disabled"]
    x()

def x():
    label1 = Label(text="Туристические маршруты по достопримечательностям Санкт-Петербурга",anchor=NW, padx=6, pady=6)
    def c():
        click_btn1()
        b["state"] = ["disabled"]
    b = ttk.Button(text="-->",command=c)
    label1.pack()
    b.pack()
m=0

s=''
for i in d:
    s+= i
    s+=' '

def click_btn1():
    global s
    label9=Label(text="Достопримечательности:",anchor=NW, padx=6, pady=6)
    label9.pack(anchor="nw")

    s_var = StringVar(value=s)
    listbox = Listbox(listvariable=s_var)
    listbox.pack(side=LEFT, fill=BOTH, expand=1)
      
    scrollbar = ttk.Scrollbar(orient="vertical", command=listbox.yview)
    scrollbar.pack(side=LEFT, fill=Y)
      
    listbox["yscrollcommand"]=scrollbar.set

    label10=Label(text="Введите ограничение по стоимости входного билета",anchor=NW, padx=6, pady=6)
    label10.pack(anchor="nw")
    entry7 = ttk.Entry()
    entry7.pack(anchor=NW, padx=10, pady=10)     
    def P():
        global m
        m = int(entry7.get())
        f()
        N["state"] = ["disabled"]
        entry7["state"] = ["disabled"]
    N = ttk.Button(text="->", command=P)
    N.pack(anchor=NW, padx=6, pady=6)
    

def f():
    global d,c,m
    in_del, out_del = "  ", "  "
    S = out_del.join([in_del.join([str(ele) for ele in sub]) for sub in Mf(F(d,c,m))])

    S=S.replace(', ',',')

    label13=Label(text="Туристические маршруты:",anchor=NW, padx=6, pady=6)
    label13.pack(anchor="nw")
    S_var = StringVar(value=S)
    listbox = Listbox(listvariable=S_var)
    listbox.pack(side=LEFT, fill=BOTH, expand=1) 
    scrollbar = ttk.Scrollbar(orient="vertical", command=listbox.yview)
    scrollbar.pack(side=LEFT, fill=Y)      
    listbox["yscrollcommand"]=scrollbar.set
    g()
    
def g():
    label1012=Label(text="Самый дешевый маршрут и его стоимость",anchor=NW, padx=6, pady=6)
    label1012.pack(anchor="nw")
    label = Label(text=Mm(F(d,c,m)),anchor=NW, padx=6, pady=6)
    label.pack(anchor=NW, padx=6, pady=6)
    label99=Label(text="Заметки")
    label99.pack(anchor="nw")
    text = Text(width=25, height=10)
    text.pack()
btn = ttk.Button(text="Начать", command=begin)
btn.pack()
root.mainloop()

