
import tkinter as tk
from tkinter import messagebox


class CheckersGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Шашки")

        self.menu_frame = tk.Frame(master)
        self.menu_frame.pack()

        self.login_frame = tk.Frame(master)
        self.start_frame = tk.Frame(master)

        self.show_login()

    def show_login(self):
        self.menu_frame.pack_forget()
        self.login_frame.pack()

        tk.Label(self.login_frame, text="Логин:").grid(row=0, column=0)
        tk.Label(self.login_frame, text="Пароль:").grid(row=1, column=0)

        self.username_entry = tk.Entry(self.login_frame)
        self.password_entry = tk.Entry(self.login_frame, show="*")
        
        self.username_entry.grid(row=0, column=1)
        self.password_entry.grid(row=1, column=1)

        tk.Button(self.login_frame, text="Войти", command=self.login).grid(row=2, column=0, columnspan=2)
        tk.Button(self.login_frame, text="Регистрация", command=self.register).grid(row=3, column=0, columnspan=2)

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        #проверка логина и пароля
        if username and password:  
            messagebox.showinfo("Вход", "Вы успешно вошли в систему!")
            self.show_start_menu()
        else:
            messagebox.showwarning("Ошибка", "Введите логин и пароль.")

    def register(self):
        messagebox.showinfo("Регистрация", "Регистрация")

    def show_start_menu(self):
        self.login_frame.pack_forget()
        self.menu_frame.pack()

        self.button1 = tk.Button(self.menu_frame, text="Начать игру", command=self.start_game)
        self.button1.pack(fill=tk.X)
        self.button2 = tk.Button(self.menu_frame, text="Выйти", command=self.master.quit)
        self.button2.pack(fill=tk.X)

    def start_game(self):
        print("Игра началась!")  
        game=Game(root)
        self.button1.pack_forget()


class Game:
    def __init__(self, master):
        self.master = master
        self.master.title("Шашки Артамонова")
        self.board_size = 8
        self.board = [[None for _ in range(self.board_size)] for _ in range(self.board_size)]
        self.current_player = "white"
        self.create_board()
        self.populate_board()
        self.selected_piece = None

    def create_board(self):
        self.canvas = tk.Canvas(self.master, width=400, height=400)
        self.canvas.pack()
        for row in range(self.board_size):
            for col in range(self.board_size):
                color = "white" if (row + col) % 2 == 0 else "grey"
                self.canvas.create_rectangle(col * 50, row * 50, col * 50 + 50, row * 50 + 50, fill=color)
        
        self.canvas.bind("<Button-1>", self.click)

    def populate_board(self):
        for row in range(3):
            for col in range(self.board_size):
                if (row + col) % 2 == 1:
                    piece = self.canvas.create_oval(col * 50 + 5, row * 50 + 5, col * 50 + 45, row * 50 + 45, fill="white")
                    self.board[row][col] = piece

        for row in range(5, 8):
            for col in range(self.board_size):
                if (row + col) % 2 == 1:
                    piece = self.canvas.create_oval(col * 50 + 5, row * 50 + 5, col * 50 + 45, row * 50 + 45, fill="white")
                    self.board[row][col] = piece

    def click(self, event):
        col = event.x // 50
        row = event.y // 50
        if self.selected_piece is None:
            piece = self.board[row][col]
            if piece and self.canvas.itemcget(piece, "fill") == self.current_player:
                self.selected_piece = (row, col)
        else:
            if self.move_piece(row, col):
                self.selected_piece = None
                self.check_game_end()

    def move_piece(self, row, col):
        old_row, old_col = self.selected_piece
        piece = self.board[old_row][old_col]
        if self.is_valid_move(old_row, old_col, row, col):
            self.canvas.move(piece, (col - old_col) * 50, (row - old_row) * 50)
            self.board[row][col] = piece
            self.board[old_row][old_col] = None
            return True
        return False

    def is_valid_move(self, old_row, old_col, new_row, new_col):
        return (0 <= new_row < self.board_size and 0 <= new_col < self.board_size and 
                self.board[new_row][new_col] is None)

    def check_game_end(self):
        pass


if __name__ == "__main__":
    root = tk.Tk()
    game = CheckersGame(root)
    root.mainloop()

